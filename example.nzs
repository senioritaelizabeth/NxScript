# Nz-Script Example - Bytecode Scripting System
# This file demonstrates all features of the language

# ========================================
# 1. VARIABLES
# ========================================
let x = 10              # Temporary variable (only inside the script)
var y = 20              # Modifiable variable from outside
const PI = 3.14159      # Immutable constant

print("Variables:")
print("x = " + x)
print("y = " + y)
print("PI = " + PI)

# ========================================
# 2. ARITHMETIC OPERATIONS
# ========================================
let sum = x + y
let subtraction = y - x
let multiplication = x * 2
let division = y / 2
let modulo = y % 3

print("\nArithmetic operations:")
print("10 + 20 = " + sum)
print("20 - 10 = " + subtraction)
print("10 * 2 = " + multiplication)
print("20 / 2 = " + division)
print("20 % 3 = " + modulo)

# ========================================
# 3. NUMBER METHODS
# ========================================
let decimal = 10.7
let integer = decimal.floor()
let rounded = decimal.round()
let absolute = (-5).abs()

print("\nNumber methods:")
print("10.7.floor() = " + integer)
print("10.7.round() = " + rounded)
print("(-5).abs() = " + absolute)

# ========================================
# 4. STRINGS AND THEIR METHODS
# ========================================
let text = "Hello World"
let uppercase = text.upper()
let lowercase = text.lower()
let length = len(text)

print("\nStrings:")
print("Original: " + text)
print("Uppercase: " + uppercase)
print("Lowercase: " + lowercase)
print("Length: " + length)

# ========================================
# 5. ARRAYS
# ========================================
let numbers = [1, 2, 3, 4, 5]
numbers.push(6)
let last = numbers.pop()
let first = numbers[0]

print("\nArrays:")
print("Array: " + numbers)
print("First element: " + first)
print("Length: " + len(numbers))

# ========================================
# 6. DICTIONARIES
# ========================================
let person = {
    "name": "John",
    "age": 25,
    "city": "Madrid"
}

print("\nDictionaries:")
print("Name: " + person["name"])
print("Age: " + person["age"])
print("City: " + person["city"])

# ========================================
# 7. IF/ELSE CONDITIONALS
# ========================================
print("\nConditionals:")
if (x < y) {
    print("x is less than y")
} else {
    print("x is greater or equal to y")
}

let age = 18
let message = ""
if (age >= 18) {
    message = "Adult"
} else {
    message = "Minor"
}
print("Age: " + age + " - " + message)

# ========================================
# 8. WHILE LOOPS
# ========================================
print("\nWhile loop:")
let counter = 0
let sum_while = 0
while (counter < 5) {
    sum_while = sum_while + counter
    counter = counter + 1
}
print("Sum from 0 to 4: " + sum_while)

# ========================================
# 9. FOR LOOPS (with arrays)
# ========================================
print("\nFor loop:")
let fruits = ["apple", "banana", "orange"]
for (fruit in fruits) {
    print("- " + fruit)
}

# ========================================
# 10. FUNCTIONS
# ========================================
func add(a, b) {
    return a + b
}

func multiply(a, b) -> Number {
    return a * b
}

print("\nFunctions:")
let result1 = add(5, 3)
let result2 = multiply(4, 7)
print("add(5, 3) = " + result1)
print("multiply(4, 7) = " + result2)

# ========================================
# 11. LAMBDAS (anonymous functions)
# ========================================
let double = (n) -> n * 2
let square = (x) -> x * x

print("\nLambdas:")
print("double(5) = " + double(5))
print("square(4) = " + square(4))

# ========================================
# 12. FUNCTIONS WITH MULTIPLE PARAMETERS
# ========================================
func calculateAverage(a, b, c) {
    let sum = a + b + c
    return sum / 3
}

let average = calculateAverage(10, 20, 30)
print("\nAverage of 10, 20, 30: " + average)

# ========================================
# 13. RECURSIVE FUNCTIONS
# ========================================
func factorial(n) {
    if (n <= 1) {
        return 1
    } else {
        return n * factorial(n - 1)
    }
}

print("\nRecursion:")
print("factorial(5) = " + factorial(5))

# ========================================
# 14. COMPARISON OPERATORS
# ========================================
print("\nComparisons:")
print("10 == 10: " + (10 == 10))
print("10 != 5: " + (10 != 5))
print("10 > 5: " + (10 > 5))
print("10 < 20: " + (10 < 20))
print("10 >= 10: " + (10 >= 10))
print("10 <= 15: " + (10 <= 15))

# ========================================
# 15. LOGICAL OPERATORS
# ========================================
print("\nLogical operators:")
print("true && true: " + (true && true))
print("true && false: " + (true && false))
print("true || false: " + (true || false))
print("!true: " + (!true))

# ========================================
# 16. COMPLETE EXAMPLE: FIBONACCI
# ========================================
func fibonacci(n) {
    if (n <= 1) {
        return n
    }
    return fibonacci(n - 1) + fibonacci(n - 2)
}

print("\nFibonacci series:")
let i = 0
while (i < 8) {
    print("fibonacci(" + i + ") = " + fibonacci(i))
    i = i + 1
}

# ========================================
# 17. ADVANCED ARRAY MANIPULATION
# ========================================
print("\nAdvanced array manipulation:")
let list = []
list.push(10)
list.push(20)
list.push(30)
print("List after push: " + list)

let last_element = list.pop()
print("Last element removed: " + last_element)
print("List after pop: " + list)

# ========================================
# END
# ========================================
print("\n========================================")
print("Script completed successfully!")
print("========================================")

"hello world!"